document.addEventListener('DOMContentLoaded', () => {
    const excuseTextElement = document.getElementById('excuse-text');
    const generateButton = document.getElementById('generate-button');
    const copyButton = document.getElementById('copy-button'); // Novo bot√£o
    const emojiAreaElement = document.getElementById('emoji-area');
    const currentYearElement = document.getElementById('current-year');

    const initialExcuseText = "Clique no bot√£o abaixo para gerar sua desculpa!";

    if (currentYearElement) {
        currentYearElement.textContent = new Date().getFullYear();
    }

    const excuses = [
        { text: "Meu hamster entrou em greve de fome e precisei fazer uma interven√ß√£o.", emoji: "üêπ‚úä" },
        { text: "Fui abduzido por alien√≠genas, mas eles me devolveram porque eu roncava muito.", emoji: "üëΩüõ∏üò¥" },
        { text: "Meu unic√≥rnio de estima√ß√£o precisou de uma cirurgia de emerg√™ncia na asa.", emoji: "ü¶Ñüíâ" },
        { text: "Achei um mapa do tesouro no meu cereal e a aventura me chamou.", emoji: "üó∫Ô∏èüè¥‚Äç‚ò†Ô∏èü•£" },
        { text: "Meu despertador decidiu tirar o dia de folga e n√£o me avisou.", emoji: "‚è∞üò¥üå¥" },
        { text: "Fui convocado para uma reuni√£o urgente com esquilos sobre o estoque de nozes do inverno.", emoji: "üêøÔ∏èüå∞ü§ù" },
        { text: "Meu carro foi confundido com uma nave espacial e rebocado pela NASA.", emoji: "üöóüöÄüåå" },
        { text: "Participei de um concurso de quem pisca por √∫ltimo com uma est√°tua e perdi a no√ß√£o do tempo.", emoji: "üóøüëÄ‚è≥" },
        { text: "Meu peixinho dourado estava se afogando e precisei fazer respira√ß√£o boca-a-boca.", emoji: "üê†üòÆüí®" },
        { text: "O Wi-Fi do vizinho estava t√£o forte que fui sugado para dentro da internet.", emoji: "üíªüåÄü§Ø" },
        { text: "Minha sombra fugiu e passei a manh√£ tentando convenc√™-la a voltar.", emoji: "üë§üèÉ‚Äç‚ôÇÔ∏èüí¨" },
        { text: "Um pombo roubou as chaves do meu carro e s√≥ as devolveu em troca de um saco de pipoca.", emoji: "üê¶üîëüçø" },
        { text: "Acordei falando √©lfico fluentemente e precisei encontrar um tradutor.", emoji: "üßùüó£Ô∏èüìñ" },
        { text: "Meu gato se candidatou √† presid√™ncia e precisei ajudar na campanha.", emoji: "üòºüó≥Ô∏èüëî" },
        { text: "Descobri que sou o herdeiro de um reino muito distante e tive que resolver quest√µes burocr√°ticas reais.", emoji: "üëëüìú‚úàÔ∏è" },
        { text: "Meu caf√© da manh√£ come√ßou a levitar e precisei chamar um especialista em fen√¥menos paranormais.", emoji: "‚òïÔ∏èüëªüî¨" },
        { text: "Fui desafiado para um duelo de dan√ßa por um rob√¥ e n√£o pude recusar.", emoji: "ü§ñüï∫üíÉ" },
        { text: "Minhas plantas iniciaram uma revolu√ß√£o e tive que negociar a paz.", emoji: "üåø‚úä‚òÆÔ∏è" },
        { text: "Um portal para outra dimens√£o abriu no meu arm√°rio. A visita foi r√°pida, prometo.", emoji: "üö™üååüö∂" },
        { text: "O carteiro e eu trocamos de corpo. Foi um dia confuso para as correspond√™ncias.", emoji: "üì¨üîÑüòµ" }
    ];

    let lastExcuseIndex = -1;

    function getRandomExcuse() {
        let randomIndex;
        if (excuses.length > 1) {
            do {
                randomIndex = Math.floor(Math.random() * excuses.length);
            } while (randomIndex === lastExcuseIndex);
        } else {
            randomIndex = 0;
        }
        lastExcuseIndex = randomIndex;
        return excuses[randomIndex];
    }

    function displayExcuse() {
        const randomExcuse = getRandomExcuse();
        excuseTextElement.textContent = randomExcuse.text;
        excuseTextElement.style.animation = 'none';
        void excuseTextElement.offsetWidth;
        excuseTextElement.style.animation = 'textAppear 0.4s ease-out forwards'; // Usando a anima√ß√£o do tema claro

        emojiAreaElement.textContent = randomExcuse.emoji;
        emojiAreaElement.style.animation = 'none';
        void emojiAreaElement.offsetWidth;
        emojiAreaElement.style.animation = 'popIn 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0.1s forwards'; // Usando a anima√ß√£o do tema claro

        // A linha abaixo altera a cor de fundo do card de desculpas.
        // Se voc√™ preferir a cor definida no CSS, comente ou remova esta parte.
        const pastelColors = [
            '#ffe6e6', '#e6ffe6', '#e6f7ff', '#fff5e6', '#f0e6ff',
            '#ffd6cc', '#ccffd6', '#cce0ff', '#ffebcc', '#e0ccff'
        ];
        // Verifique se o tema claro est√° ativo e se as cores pastel ainda s√£o desejadas.
        // Para o tema claro, voc√™ pode querer usar a cor definida no CSS: var(--background-excuse-card)
        // ou uma lista de cores claras que combinem.
        // Por enquanto, vou manter, mas voc√™ pode ajust√°-la:
        const randomColor = pastelColors[Math.floor(Math.random() * pastelColors.length)];
        document.querySelector('.excuse-card').style.backgroundColor = randomColor;
    }

    // Fun√ß√£o para copiar o texto
    function copyExcuseToClipboard() {
        const textToCopy = excuseTextElement.textContent;

        // N√£o copiar o texto placeholder inicial
        if (textToCopy && textToCopy !== initialExcuseText) {
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    // Feedback de sucesso
                    const originalButtonText = copyButton.innerHTML;
                    copyButton.innerHTML = '<span class="button-icon">‚úÖ</span> Copiado!';
                    copyButton.classList.add('copied'); // Adiciona classe para poss√≠vel estilo extra
                    setTimeout(() => {
                        copyButton.innerHTML = originalButtonText;
                        copyButton.classList.remove('copied');
                    }, 2000); // Volta ao normal ap√≥s 2 segundos
                })
                .catch(err => {
                    console.error("Erro ao copiar a desculpa: ", err);
                    // Feedback de erro (opcional, pode ser um alert ou mudar o texto do bot√£o)
                    const originalButtonText = copyButton.innerHTML;
                    copyButton.innerHTML = 'Erro ao copiar!';
                     setTimeout(() => {
                        copyButton.innerHTML = originalButtonText;
                    }, 2000);
                });
        } else if (textToCopy === initialExcuseText) {
            // Feedback se tentar copiar o texto inicial
            const originalButtonText = copyButton.innerHTML;
            copyButton.textContent = 'Gere uma desculpa primeiro!';
             setTimeout(() => {
                copyButton.innerHTML = originalButtonText;
            }, 2000);
        }
    }

    if (generateButton && excuseTextElement && emojiAreaElement && copyButton) {
        generateButton.addEventListener('click', displayExcuse);
        copyButton.addEventListener('click', copyExcuseToClipboard); // Adiciona listener ao novo bot√£o
        
        // Exibe uma desculpa inicial ao carregar a p√°gina (ou o texto placeholder)
        // Para evitar exibir uma desculpa aleat√≥ria direto, podemos apenas deixar o placeholder.
        // displayExcuse(); // Comente se n√£o quiser uma desculpa aleat√≥ria ao carregar
        excuseTextElement.textContent = initialExcuseText; // Garante que o texto inicial seja o placeholder
        emojiAreaElement.textContent = 'ü§î'; // Emoji placeholder

    } else {
        console.error("N√£o foi poss√≠vel encontrar os elementos necess√°rios no DOM.");
        if (!copyButton) console.error("Bot√£o de copiar n√£o encontrado.");
    }
});